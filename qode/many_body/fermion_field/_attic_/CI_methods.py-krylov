#    (C) Copyright 2025 Anthony D. Dutoi
# 
#    This file is part of Qode.
# 
#    Qode is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    Qode is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with Qode.  If not, see <http://www.gnu.org/licenses/>.
#
import numpy
from ...util import struct, indented, sort_eigen
from ...math import linear_inner_product_space
from ...math.lanczos import lowest_eigen
from .CI_space_traits import CI_space_traits
from .field_op_ham import Hamiltonian
from . import configurations



def monomer_configs(frag, Sz=0):
    configs, _ = configurations.Sz_configs(frag.basis.n_spatial_orb, frag.n_elec_ref, Sz, frag.basis.core)
    return configs    # just need complete spin-orbital configs

def dimer_configs(frag0, frag1, Sz=0):
    n_spatial_0 = frag0.basis.n_spatial_orb
    n_spatial_1 = frag1.basis.n_spatial_orb
    n_spatial   = n_spatial_0 + n_spatial_1
    core        = configurations.combine_orb_lists(frag0.basis.core, frag1.basis.core, n_spatial_0)    # core in dimer spatial-orb representation

    _, (dn_configs, up_configs) = configurations.Sz_configs(n_spatial, frag0.n_elec_ref+frag1.n_elec_ref, Sz, core)    # get individual spin-dn/up configs
    dn_configs_decomp = configurations.decompose_configs(dn_configs, [n_spatial_0, n_spatial_1])    # break spin-dn/up configurations into fragments ...
    up_configs_decomp = configurations.decompose_configs(up_configs, [n_spatial_0, n_spatial_1])    # ... Gives nested representation, with frag1 as slow index

    # To understand the order/structure of this looping, it may be helpful to see the notes in __init__.py
    nested = []
    combine_configs = configurations.config_combination([n_spatial_1, n_spatial_1])
    for up_configs_0,up_config_1 in dn_configs_decomp:        # loop over all (frag-decomposed) combinations of spin-up ...
        for dn_configs_0,dn_config_1 in up_configs_decomp:    # ... and spin-down configurations (spin-up first because these are high-order bits)
            configs_0 = configurations.tensor_product_configs([dn_configs_0, up_configs_0], [n_spatial_0, n_spatial_0])    # a list of configs
            config_1  = combine_configs([dn_config_1, up_config_1])                                                        # a single config
            nested += [(configs_0, config_1)]
    configs = configurations.recompose_configs(nested, [2*n_spatial_0, 2*n_spatial_1])

    return configs, nested



def _act_Sops(Sops, state_in):
    state = 1 * state_in
    for Sop in Sops:
        Sop_state = Sop|state
        state += Sop_state
    return state

def lanczos_ground(integrals, configs, occupied, thresh=None, printout=print, n_threads=1, full_ints=None):
    options = struct(printout=indented(printout))
    if thresh is not None:         # if not defined/passed forward ...
        options.thresh = thresh    # ... default from lanczos takes over

    N, h, V = integrals("N h V")
    CI_space = linear_inner_product_space(CI_space_traits(configs))

    H     = CI_space.lin_op(Hamiltonian(h,V, n_threads=n_threads))
    guess = CI_space.member(CI_space.aux.basis_vec(occupied))

    if full_ints is not None:
        Hfull = CI_space.lin_op(Hamiltonian(full_ints.h, full_ints.V, n_threads=n_threads))
        Sops = [CI_space.lin_op(Hamiltonian(sig1, sig2, n_threads=n_threads)) for sig1,sig2 in zip(full_ints.sigma_1, full_ints.sigma_2)]
        Sguess = _act_Sops(Sops, guess)
        SHguess = _act_Sops(Sops, Hfull|guess)
        print(((guess|SHguess) / (guess|Sguess)) + N)
        print((guess|Sguess))

    printout("Energy of guess =", (guess|H|guess) + N)
    (Eval,Evec), = lowest_eigen(H, [guess], **options)
    printout("Ground-state energy = ", Eval+N)

    if full_ints is not None:
        SEvec = _act_Sops(Sops, Evec)
        SHEvec = _act_Sops(Sops, Hfull|Evec)
        print(((Evec|SHEvec) / (Evec|SEvec)) + N)
        print((Evec|SEvec))

    return Eval, Evec






def krylov_iteration(Psi, Hmasked, Hfull, Sops, B=10, printout=print, n_threads=1):

    # make chain of H^n vectors using masked Hamiltonian, n=(0,B-1) for BxB matrix
    # act SH with full Hamiltonian on each vector in chain store separately for B-1 entries
    # build BxB SH and S matrices
    # transform to symmetric orthonormal rep
    # diagonalize
    # back-transform and return lowest vec/val

    Krylov = [Psi]
    for n in range(1,B):
        Psi = Hmasked|Psi
        Krylov += [Psi]

    SKrylov  = [_act_Sops(Sops,       psi) for psi in Krylov]
    SHKrylov = [_act_Sops(Sops, Hfull|psi) for psi in Krylov]

    S = numpy.array([[(psi_m|Spsi_n)  for Spsi_n  in SKrylov ] for psi_m in Krylov])
    H = numpy.array([[(psi_m|SHpsi_n) for SHpsi_n in SHKrylov] for psi_m in Krylov])
    printout("error in overlap     matrix symmetry =", numpy.linalg.norm(S - S.T))
    printout("error in hamiltonian matrix symmetry =", numpy.linalg.norm(H - H.T))

    s, U = sort_eigen(numpy.linalg.eigh(S))
    s = numpy.diag(s**(-1/2))

    H = s @ U.T @ H @ U @ s
    evals, evecs = sort_eigen(numpy.linalg.eigh(H))
    evecs = U @ evecs @ U.T

    return evals[0], evecs[:,0]



def krylov_ground(integrals, configs, occupied, thresh, printout=print, n_threads=1, full_ints=None):
    printout=indented(printout)

    CI_space = linear_inner_product_space(CI_space_traits(configs))
    guess = CI_space.member(CI_space.aux.basis_vec(occupied))

    N = integrals.N
    Hmasked = CI_space.lin_op(Hamiltonian(integrals.h, integrals.V, n_threads=n_threads))
    Hfull   = CI_space.lin_op(Hamiltonian(full_ints.h, full_ints.V, n_threads=n_threads))
    Sops   = [CI_space.lin_op(Hamiltonian(sigma,                    n_threads=n_threads)) for sigma in full_ints.sigma]
    Sguess  = _act_Sops(Sops, guess)
    SHguess = _act_Sops(Sops, Hfull|guess)
    Nguess = (guess|Sguess)
    Eguess = (guess|SHguess) / Nguess
    printout("norm   of guess =", Nguess)
    printout("energy of guess =", Eguess + N)
    printout("energy of guess (raw) =", Eguess)

    while error>thresh:
        Eval, Evec = krylov_iteration(guess, Hmasked, Hfull, Sops, printout=printout, n_threads=n_threads)
        error = abs(Eval - Eguess)
        Eguess, guess = Eval, Evec

    SEvec  = _act_Sops(Sops, Evec)
    SHEvec = _act_Sops(Sops, Hfull|Evec)
    NEvec = (Evec|SEvec)
    EEvec = (Evec|SHEvec) / NEvec
    printout("norm   of eigenvector =", NEvec)
    printout("energy of eigenvector =", EEvec + N)
    printout("energy of eigenvector (raw) =", EEvec)

    return Eval, Evec







